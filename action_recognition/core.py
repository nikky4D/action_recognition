# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['PATH', 'get_sequence_paths', 'ImageTuple', 'ImageTupleBlock', 'get_tuple_files', 'grand_parent_label',
           'get_block']

# Cell
from fastai2.vision.all import *

# Cell
PATH = Path.cwd().parent/'data/UCF-101-frames'
Path.BASE_PATH = PATH.parent

# Cell
def get_sequence_paths(path):
    " gets all sequences folders paths"
    sequence_paths = []
    for actions in PATH.ls():
        sequence_paths += actions.ls()
    return sequence_paths

# Cell
class ImageTuple(Tuple):
    "An Image tuple class of arbitrary lenght"
    @classmethod
    def create(cls, fns):
        return cls(tuple(PILImage.create(f) for f in fns))

    def show(self, ctx=None, **kwargs):
        "shows 1st middle and last images of the seq"
        n = len(self)
        for t in self:
            if not isinstance(t, Tensor):
                return ctx
        return show_image(torch.cat((self[0], self[n//2], self[-1]) , dim=2), ctx=ctx, figsize=(6,3),**kwargs)

# Cell
def ImageTupleBlock(): return TransformBlock(type_tfms=ImageTuple.create, batch_tfms=IntToFloatTensor)

# Cell
def get_tuple_files(files, seq_len=40):
    "Get a list of tuple paths"
    return L(L(sequences.ls()[0:seq_len].sorted(key=lambda f: int(f.name.split('.')[0]))) for sequences in files)

# Cell
def grand_parent_label(o, **kwargs):
    "Label `item` with the gparent folder name."
    return o[0].parent.parent.name

# Cell
def get_block(image_size=64, seq_len=40):
    "A block for sequence of images from file path list"
    block = DataBlock(blocks    = (ImageTupleBlock, CategoryBlock),
                      get_items = partial(get_tuple_files, seq_len=seq_len),
                      get_y     = grand_parent_label,
                      item_tfms = Resize(image_size),
                      splitter  = RandomSplitter(),
                      batch_tfms=[Normalize.from_stats(*imagenet_stats)])
    return block

# Cell
@typedispatch
def show_batch(x:ImageTuple, y, samples, ctxs=None, max_n=6, nrows=None, ncols=2, figsize=None, **kwargs):
    if figsize is None: figsize = (ncols*6, max_n//ncols * 3)
    if ctxs is None: ctxs = get_grid(min(len(samples), max_n), nrows=nrows, ncols=ncols, figsize=figsize)
    ctxs = show_batch[object](x, y, samples, ctxs=ctxs, max_n=max_n, **kwargs)
    return ctxs