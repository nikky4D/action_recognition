# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_models.ipynb (unless otherwise specified).

__all__ = ['Encoder', 'SimpleModel', 'simple_splitter']

# Cell
@delegates(create_cnn_model)
class Encoder(Module):
    def __init__(self, arch=resnet34, n_in=3, weights_file=None, head=True, **kwargs):
        "Encoder based on resnet, if head=False returns the feature map"
        model = create_cnn_model(arch, n_out=1, n_in=n_in, pretrained=True, **kwargs)
        if weights_file is not None: load_model(weights_file, model, opt=None)
        self.body = model[0]
        if head: self.head = model[1]
        else:    self.head = nn.Sequential(*model[1][0:4])

    def forward(self, x):
        return self.head(self.body(x))

# Cell
class SimpleModel(Module):
    "A simple CNN model"
    def __init__(self, arch=resnet34, weights_file=None, head=True, y_range=(-1,1), debug=False):
        "Create a simple arch based model"
        model = Encoder(arch, 3, weights_file, head=True, y_range=y_range)
        self.encoder = model.body
        if head: self.head = model.head
        else:    self.head = model.head[0:4]
        self.debug = debug

    def forward(self, x):
        if self.debug:  print(f' input len:   {len(x), x[0].shape}')
        x = torch.stack(x, dim=1)
        if self.debug:  print(f' after stack:   {x.shape}')
        batch_size, seq_length, c, h, w = x.shape
        x = x.view(batch_size * seq_length, c, h, w)
        x = self.encoder(x)
        if self.debug:  print(f' encoded shape: {x.shape}')
        x = self.head(x)
        return x.view(batch_size, seq_length, -1).squeeze()

# Cell
def simple_splitter(model):
    return [params(model.encoder), params(model.head)]